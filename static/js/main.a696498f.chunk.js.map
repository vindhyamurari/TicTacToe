{"version":3,"sources":["components/cell.js","components/board.js","components/input.js","components/moveTable.js","components/timer.js","app.js","index.js"],"names":["Cell","props","style","onWin","forEach","ele","id","backgroundColor","className","onClick","onCellClick","value","Board","cells","map","handleCellClick","winnerIs","winLine","input","handleChange","e","setState","player","target","handleSave","onSave","state","label","this","type","placeholder","onChange","React","Component","Table","movesArray","move","slno","moveBy","movePosition","Timer","resetTimer","reset","count","time","resTime","minutes","Math","trunc","seconds","class","from","iid","setInterval","whosTurn","winnerIsFound","findWinner","line","winValue","Game","handleClick","currentValue","nextValue","current","newCells","moves","filter","i","length","player1","player2","temp","push","initalTimeOfPlayer1","initalTimeOfPlayer2","resetStatus","handleSavePlayerName","name","renderBoardAndRelated","status","remaining","winner","console","log","renderPlayNameInput","toggleDisplay","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a696498f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Cell=(props)=>{\r\n    let style\r\n    if(props.onWin){\r\n        props.onWin.forEach(ele => {\r\n            if(props.id===ele){\r\n                style={\r\n                    backgroundColor:\"rgb(255,255,31)\"\r\n                }\r\n            }\r\n        });  \r\n    }\r\n    return(\r\n        <button className=\"cell\" style={style} onClick={()=>props.onCellClick(props.id)}>{props.value}</button>\r\n    )\r\n}\r\n\r\nexport default Cell;","import React from 'react'\r\nimport Cell from './cell'\r\n\r\n\r\nconst Board=(props)=>{\r\n    return (\r\n        <>\r\n            <div className=\"board\">\r\n            {props.cells.map((value,id)=>\r\n            <Cell id={id} value={value} onCellClick={props.handleCellClick} onWin={props.winnerIs?props.winnerIs.winLine:null}/>\r\n            )}\r\n            </div>\r\n            <br/>\r\n        </>  \r\n    )\r\n}\r\nexport default Board","import React from 'react'\r\n\r\nclass input extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            player:props.value\r\n        }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({player:e.target.value})\r\n    }\r\n    handleSave=()=>{\r\n        this.props.onSave(this.state.player,this.props.label)\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            <label className=\"label\">{this.props.label}</label>\r\n            <input className=\"input\" type=\"text\" placeholder={this.props.label} value={this.state.player} onChange={this.handleChange}></input>\r\n            <button className=\"button\" onClick={this.handleSave}>SAVE</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default input","import React from 'react'\r\n\r\nconst Table=(props)=>{\r\n    return (\r\n        <table className=\"movesTable\">\r\n            <tr>\r\n                <th>Sl No</th>\r\n                <th>Move By</th>\r\n                <th>Move Position</th>\r\n            </tr>\r\n            {props.movesArray.map(move => {\r\n               return ( \r\n                <tr>\r\n                    <td>{move.slno}</td>\r\n                    <td>{move.moveBy}</td>\r\n                    <td>{move.movePosition}</td>\r\n                </tr>\r\n               )\r\n            })\r\n            }\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table","import React from 'react'\r\n\r\nclass Timer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            count:props.time,\r\n            reset:false\r\n        }\r\n    }\r\n    resetTimer=()=>{\r\n        if(this.state.reset!==this.props.reset)\r\n        this.setState({\r\n            count:0,\r\n            reset:!this.state.reset\r\n        })\r\n    }\r\n    render(){\r\n        this.resetTimer()\r\n        let resTime=''\r\n        if(this.state.count<=60){\r\n            if(this.state.count<=9){\r\n                resTime='00 : 0'+this.state.count\r\n            }\r\n            else{\r\n                resTime='00 : '+this.state.count\r\n            }\r\n        }\r\n        else{\r\n            let minutes=Math.trunc(this.state.count/60)\r\n            let seconds=Math.trunc(this.state.count%60)\r\n            if(seconds<=9 && minutes<=9){\r\n                resTime='0'+minutes+' : 0 '+seconds\r\n            }\r\n            else if(seconds<=9){\r\n                resTime=minutes+' : 0 '+seconds\r\n            }\r\n            else if(minutes<=9){\r\n                resTime='0'+minutes+' : '+seconds\r\n            }\r\n            else{\r\n                resTime=minutes+' : '+seconds\r\n            }\r\n        }\r\n        return(\r\n            <div className=\"outerdiv\">\r\n            <div className=\"timer\">\r\n            <label class=\"label\">Player {this.props.from}</label>\r\n            <p className=\"time\">{resTime}</p>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n    componentDidMount(){\r\n        this.iid=setInterval(() => {\r\n            if(this.props.whosTurn === this.props.from && !this.props.winnerIsFound)\r\n            this.setState({\r\n                count:this.state.count+1\r\n            })\r\n            else if(!this.props.whosTurn === this.props.from && !this.props.winnerIsFound)\r\n            this.setState({\r\n                count:this.state.count+1\r\n            })\r\n        }, 1000);\r\n    }\r\n\r\n}\r\nexport default Timer;","import React from 'react'\r\nimport Board from './components/board'\r\nimport Input from './components/input'\r\nimport Table from './components/moveTable'\r\nimport Timer from './components/timer'\r\n\r\n\r\nclass Game extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            player1:'o',\r\n            player2:'x',\r\n            current:'o',\r\n            cells:[null,null,null,null,null,null,null,null,null],\r\n            movesArray:[],\r\n            toggleDisplay:false,\r\n            initalTimeOfPlayer1:0,\r\n            initalTimeOfPlayer2:0,\r\n            resetStatus:false\r\n        }\r\n    }\r\n    handleClick=(id)=>{\r\n        let currentValue=this.state.cells[id]\r\n        if(findWinner(this.state.cells) || currentValue)\r\n            return\r\n        let nextValue=this.state.current==='o'?'x':'o'\r\n        let newCells=[...this.state.cells]\r\n        newCells[id]=this.state.current\r\n        let moves={\r\n            slno:0,moveBy:'',movePosition:0\r\n        }\r\n        moves.slno=(this.state.cells.filter((i)=>i!==null).length)+1\r\n        if(this.state.current==='o'){\r\n            moves.moveBy=(this.state.player1)\r\n        }\r\n        else{\r\n            moves.moveBy=(this.state.player2)\r\n        }\r\n        moves.movePosition=id+1\r\n        let temp=this.state.movesArray\r\n        temp.push(moves)\r\n        this.setState({\r\n            current:nextValue,\r\n            cells:newCells,\r\n            movesArray:temp,\r\n        })\r\n    }\r\n    reset=()=>{\r\n        this.setState({\r\n            current:'o',\r\n            cells:[null,null,null,null,null,null,null,null,null],\r\n            movesArray:[],\r\n            initalTimeOfPlayer1:0,\r\n            initalTimeOfPlayer2:0,\r\n            whosTurn:true,\r\n            resetStatus:!this.state.resetStatus\r\n        })\r\n    }\r\n\r\n    handleSavePlayerName=(name,label)=>{\r\n        if(label==='Player 1'){\r\n            this.setState({\r\n                player1:name\r\n            })\r\n        }\r\n        else{\r\n            this.setState({\r\n                player2:name\r\n            })\r\n        }\r\n       \r\n    }\r\n    renderBoardAndRelated=()=>{\r\n        let status\r\n        let winnerIsFound\r\n        let remaining=this.state.cells.filter((i)=>i!==null)\r\n        let winner=findWinner(this.state.cells)\r\n        if(remaining.length===this.state.cells.length && !(winner)){\r\n            winnerIsFound=true\r\n            status=`It's a Tie :(`\r\n        }\r\n            \r\n        else if(winner){\r\n            winnerIsFound=true\r\n            if(winner.winValue==='o')\r\n                status=this.state.player1+' Wins :)'\r\n            else \r\n                status=this.state.player2+' Wins :)' \r\n        }\r\n        else{\r\n            if(this.state.current==='o')\r\n             status='Next Move ' +this.state.player1+' { O }'\r\n            else\r\n            status='Next Move ' +this.state.player2+' { X }'\r\n        }\r\n        console.log(this.state.whosTurn+ \" \"+this.state.current)\r\n        return (\r\n            <>\r\n            <table className=\"main\">\r\n                <tr>\r\n                    <td className=\"boardTD\">\r\n                    <h3 className=\"status\">{status}</h3>\r\n                    <Board cells={this.state.cells} handleCellClick={this.handleClick} winnerIs={winner}/>\r\n                    </td>\r\n                    <td className=\"boardTD\">\r\n                    <Table movesArray={this.state.movesArray}/><br/>\r\n                    </td>\r\n                </tr>\r\n            </table>\r\n            <br/><br/>\r\n            <button className=\"reset button\" onClick={this.reset}>RESET</button><br></br><br/>\r\n            {/* {this.state.current==='o'?<Timer whosTurn={this.state.whosTurn} time={this.state.initialTimeOfPlayer1} from=\"1\"/>:<Timer whosTurn={this.state.whosTurn} time={this.state.initalTimeOfPlayer2} from=\"2\"/>} */}\r\n            <Timer whosTurn={this.state.current} time={this.state.initalTimeOfPlayer1} from=\"o\" reset={this.state.resetStatus} winnerIsFound={winnerIsFound}/>\r\n            <Timer whosTurn={this.state.current} time={this.state.initalTimeOfPlayer2} from=\"x\" reset={this.state.resetStatus} winnerIsFound={winnerIsFound}/>\r\n            </>\r\n        )\r\n    }\r\n    renderPlayNameInput=()=>{\r\n        return(\r\n            <>\r\n            <br/><br/>\r\n            <Input className=\"inputComponent\" label=\"Player 1\" value=\"o\" onSave={this.handleSavePlayerName}></Input>\r\n            <Input className=\"inputComponent\" label=\"Player 2\" value=\"x\" onSave={this.handleSavePlayerName}></Input>\r\n            <button className=\"button start\" onClick={()=>this.setState({toggleDisplay:true})}>START</button>\r\n            </>\r\n        )\r\n     \r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            <h1 className=\"title\">Tic Tac Toe</h1>\r\n            {this.state.toggleDisplay?this.renderBoardAndRelated():this.renderPlayNameInput()}\r\n            </>\r\n        )\r\n    }\r\n}\r\nfunction findWinner(cells){\r\n    const winnerIndxes=[\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n    for(let line of winnerIndxes){\r\n        if(cells[line[0]] && cells[line[0]]===cells[line[1]] && cells[line[0]]===cells[line[2]])\r\n            return {winValue:cells[line[0]],\r\n                    winLine:line}\r\n    }\r\n    return null\r\n}\r\nexport default Game","import ReactDOM from 'react-dom'\r\nimport App from './app'\r\nimport './style.css'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n)\r\n\r\n"],"sourceRoot":""}